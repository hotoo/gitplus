#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var yaml = require('js-yaml');
var ini = require('ini');
var cp = require('child_process');
var spawn = cp.spawn;
var exec = cp.exec;

function getUserHome() {
  return process.env[(process.platform === 'win32') ? 'USERPROFILE' : 'HOME'];
}
var $HOME = getUserHome();

var gitplusrc = path.join($HOME, '.gitplusrc');
var CONFIG = fs.existsSync(gitplusrc) ?
             yaml.safeLoad(fs.readFileSync(gitplusrc)) : {};

var gitconfig = path.join($HOME, '.gitconfig');
var GITCONFIG = fs.existsSync(gitconfig) ?
                ini.parse(fs.readFileSync(gitconfig, 'utf-8')) :
                { alias: {} };

var GIT_BIN = CONFIG['git-path'] || '/usr/bin/git';

if (!fs.existsSync(GIT_BIN)) {
  console.log('command not found:', GIT_BIN, '(PLEASE CHECK ~/.gitplusrc)');
  process.exit(1)
}

var RE_GIT_REPO_URL = /^([a-zA-Z0-9._-]+)@([a-zA-Z0-9-.]+):(.*)/;

var args = process.argv.slice(2);
var subcommand = args[0];

if (GITCONFIG.alias.hasOwnProperty(subcommand)) {
  subcommand = GITCONFIG.alias[subcommand].split(/\s/)[0];
  if (subcommand.startsWith('!')) {
    subcommand = '';
  }
}
var isGitClone = subcommand === 'clone';
var repoUrl = '';

function filterUri(args) {
  if (!Array.isArray(args)) {
    return [];
  }
  return args.filter(function(arg) {
    // [git-clone](http://git-scm.com/docs/git-clone#URLS)
    return arg.startsWith('git://') ||
           arg.startsWith('ssh://') ||
           RE_GIT_REPO_URL.test(arg) ||
           arg.startsWith('http://') ||
           arg.startsWith('https://') ||
           arg.startsWith('ftp://') ||
           arg.startsWith('ftps://') ||
           arg.startsWith('rsync://') ||
           arg.startsWith('/') ||
           arg.startsWith('~/') ||
           arg.startsWith('./') ||
           arg.startsWith('../');
  });
}

function parseRepoName(repoUri) {
  return repoUri.substring(repoUri.lastIndexOf('/') + 1).replace(/\.git$/, '');
}

// @param argv: clone --depth=1 ./abc.git dir
function getRepoName (args) {
  var uris = filterUri(args);
  var repoUrl = uris[0];
  var localDir;
  var repoUrlIndex = args.indexOf(repoUrl);
  if (repoUrlIndex === args.length - 1) {
    localDir = parseRepoName(repoUrl);
  } else {
    localDir = args[repoUrlIndex + 1];
  }

  return localDir;
}

function getRepoUrl (args) {
  return filterUri(args)[0];
}

if (isGitClone) {
  repoUrl = getRepoUrl(args);
} else {
  try {
    repoUrl = cp.execSync('git remote -v')
                .toString()
                .split(/\r\n|\r|\n/)
                .filter(function(commandLine) {
                  return /^origin\s.*\(push\)$/.test(commandLine)
                });
    repoUrl = repoUrl.length ? repoUrl[0].split(/[\s]/)[1] : '';
  } catch (ex) { }
}

function execute(cmd, args, callback) {
  var c = spawn(cmd, args, {
    stdio: [process.stdin, process.stdout, process.stderr]
  });

  c.on('exit', function (code, signal) {
    callback(code, signal);
  });
}

function fixedGitBin(cmd) {
  return cmd
    .replace(/(^git )/, GIT_BIN + ' ')
    .replace(/&& *git /g, '&& ' + GIT_BIN + ' ');
}

function executeQueues (commands) {
  var command = commands.shift();
  exec(command, {
    stdio: [process.stdin, process.stdout, process.stderr]
  }, function(err, stdout, stderr){
    if (err) {
      process.stderr.write(stderr);
      return;
    }
    process.stdout.write(stdout);

    if (commands.length) {
      executeQueues(commands);
    }
  });
}

function getExtendCommands (hookName) {
  var commands = [];
  if (!subcommand) {return commands;}
  if (!CONFIG.hasOwnProperty(hookName) || !CONFIG[hookName]) {
    return commands;
  }

  Object.keys(CONFIG[hookName]).forEach(function(condition) {
    if (condition === '*' || repoUrl.indexOf(condition) >= 0) {
      var cmds = CONFIG[hookName][condition];
      commands.push.apply(commands, cmds);
    }
  });
  return commands;
}

var preCommands = getExtendCommands('pre-' + subcommand);
if (preCommands.length) {
  executeQueues(preCommands.map(function(command) {
    return fixedGitBin(command);
  }));
}

function executePostCommands () {
  var repoPath = getRepoName(args);
  var postCommands = getExtendCommands('post-' + subcommand);
  if (!postCommands.length) {return;}

  executeQueues(postCommands.map(function(command) {
    return (isGitClone ? 'cd "' + repoPath + '" && ' : '') + fixedGitBin(command);
  }));
}

execute(GIT_BIN, args, function(code) {
  if (code !== 0) {return;}

  executePostCommands();

})
